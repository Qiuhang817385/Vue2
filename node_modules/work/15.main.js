
// 组件的创建和销毁相当于remove和append
// keep-alive只和v-if配套
            var Test = {
                template:`
                    <div>
                        我是test组件   
                        <input type="text" v-model="text"/>
                        <button @click="change">按钮</button> 
                    </div>
                `,data:function() {
                    return {
                        text:'hello'
                    }
                },
                methods: {
                    change:function(){
                        this.text = 'bbb'
                    }
                },
                //对应父组件,v-if false 就销毁当前组件,在父组件当中控制本组件的创建和销毁
                beforeDestroy:function() {
                    console.log('beforeDestroy')//销毁之前
                },
                destroyed:function() {
                    console.log('destroyed')//销毁之前
                },
                // 销毁最终这两个都是做一些其他功能的释放
                // 销毁最终这两个都是做一些其他功能的释放
                // 销毁最终这两个都是做一些其他功能的释放

                // 比如在销毁之前,save一下localstorage


                // 第一组
                // 只有使用组件，就会触发以上的事件（钩子函数）
                // created当中可以操作数据，并且实现vue-页面的影响，应用，发起ajax请求
                beforeCreate :function(){
                    //组件创建之前
                    console.log('beforeCreate')
                },
                created:function() {
                    //组件创建之后
                    console.log('created')
                },  
                // 第一组

                // 每次只会执行激活 或者   停用

                activated:function() {
                    console.log('组件被激活了')
                }, 
                deactivated:function() {
                    console.log('组件被停用了')
                },
                // =========================================================================================
                // beforeMount:function(){
                    // vue起作用，装载数据到dom之前
                //     // console.log(document.body.innerHTML);
                //     console.log('beforeMount');

                // },
                // mounted:function() {
                    // vue起作用，装载数据到dom之后，div id=app被替换成我们自己的dom
                    // mounted只会执行一次
                //     // console.log(document.body.innerHTML);
                //     console.log('mounted');

                // },
                //beforeMount,mounted改变页面是自然发生的,加载就会改变
                //beforeMount,mounted改变页面是自然发生的,加载就会改变
                //beforeMount,mounted改变页面是自然发生的,加载就会改变
                //beforeMount,mounted改变页面是自然发生的,加载就会改变
                // 做调试或者开发的时候,希望获取之前和之后的dom来对比进行操作.
                beforeUpdate:function(){
                    console.log(document.body.innerHTML);
                },
                updated:function() {
                    console.log(document.body.innerHTML);
                },
                //beforeUpdate,updated改变页面是基于数据改变  
                //beforeUpdate,updated改变页面是基于数据改变  
                //beforeUpdate,updated改变页面是基于数据改变  
                //beforeUpdate,updated改变页面是基于数据改变  
            }

          var App = {
            components:{
                test:Test
            },
            template:`
                <div>
                <!--对于频繁的销毁和创建组件其实不合理,加上保活,起到的作用就是缓存,这个是内置的组件
                    这个时候,只有第一次的创建,再次改变的时候,没有创建和销毁组件了

                    有这个组件,v-if控制的是激活和停用
                    没有,控制的是创建和销毁
                -->
                <keep-alive>
                   <test v-if="isExit"></test> 
                </keep-alive>
                  
                   <button @click="changeisExit">是否销毁</button>   
                </div>
            `,


            // created和active的区别，都是v-if  子组件的状态
            // created没有被keep-alive内置组件包裹,actived被包裹了
            data:function() {
                return {
                    isExit:true
                }
            },
            methods: {
                changeisExit:function(){
                    this.isExit = !this.isExit
                }
            },
            
        }
        new Vue({
            el:'#app',
            components: {
                    app: App
                },
                template: `
                <app/>
            `,
        })
   